{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","components/NotFoundPage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","NotFoundPage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SexFilters","PeopleFilters","setSearchParams","sex","get","centuries","getAll","query","toggleCentury","century","includes","filter","age","All","Male","Female","type","placeholder","onChange","event","target","map","onClick","Loader","PersonLink","person","slug","name","PeopleTable","people","sort","sortOrder","slugId","useParams","selectedPerson","find","getPerson","criteria","selectedSort","criteriaLower","toLowerCase","order","born","died","fatherName","motherName","mother","father","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","SortBy","PeoplePage","useState","setPeople","hasError","setHasError","isLoading","setIsLoading","sortBy","useEffect","getPeople","catch","finally","preparedPeople","filteredPeople","length","Math","ceil","person1","person2","localeCompare","reverse","showPeopleFilters","noPeopleOnServer","showPeopleTable","noMatchingPeople","Root","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.3d694ee2.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => (\n  <h1 className=\"title\">\n    Home Page\n  </h1>\n);\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">\n    Page not found\n  </h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nenum SexFilters {\n  All = 'All',\n  Male = 'Male',\n  Female = 'Female',\n}\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(getSearchWith(\n      searchParams,\n      { query: event.target.value || null },\n    ));\n  };\n\n  const toggleCentury = (century: string) => {\n    return centuries.includes(century)\n      ? centuries.filter(age => age !== century)\n      : [...centuries, century];\n  };\n\n  const resetFilters = () => {\n    setSearchParams({});\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">\n        Filters\n      </p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': !sex,\n          })}\n          params={{ sex: null }}\n        >\n          {SexFilters.All}\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': sex === 'm',\n          })}\n          params={{ sex: 'm' }}\n        >\n          {SexFilters.Male}\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': sex === 'f',\n          })}\n          params={{ sex: 'f' }}\n        >\n          {SexFilters.Female}\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {['16', '17', '18', '19', '20'].map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{ centuries: toggleCentury(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          onClick={resetFilters}\n          params={{\n            centuries: [],\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={`../${slug}?${searchParams.toString()}`}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const sortOrder = searchParams.get('order') || '';\n\n  const { slugId } = useParams();\n  const selectedPerson = people.find(person => person.slug === slugId);\n\n  const getPerson = (name: string | null) => {\n    return people.find(person => person.name === name);\n  };\n\n  const handleSort = (selectedSort: string) => {\n    if (selectedSort !== sort) {\n      return {\n        sort: selectedSort,\n        order: null,\n      };\n    }\n\n    if (selectedSort === sort && !sortOrder) {\n      return {\n        sort: selectedSort,\n        order: 'desc',\n      };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  const sortCriteria = ['Name', 'Sex', 'Born', 'Died'];\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {sortCriteria.map(criteria => {\n            const criteriaLower = criteria.toLowerCase();\n\n            return (\n              <th key={criteria}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {criteria}\n                  <SearchLink params={handleSort(criteriaLower)}>\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('fas', {\n                          'fa-sort': sort !== criteriaLower,\n                          'fa-sort-up': sort === criteriaLower && !sortOrder,\n                          'fa-sort-down': sort === criteriaLower && sortOrder,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            sex,\n            born,\n            died,\n            fatherName,\n            motherName,\n          } = person;\n\n          const mother = getPerson(motherName);\n          const father = getPerson(fatherName);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              className={classNames({\n                'has-background-warning': selectedPerson === person,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>\n                {(mother\n                  ? <PersonLink person={mother} />\n                  : motherName)\n                  || '-'}\n              </td>\n              <td>\n                {(father\n                  ? <PersonLink person={father} />\n                  : fatherName)\n                  || '-'}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nenum SortBy {\n  name = 'name',\n  sex = 'sex',\n  born = 'born',\n  died = 'died',\n}\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [searchParams] = useSearchParams();\n\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query')?.toLowerCase() || '';\n\n  const sortBy = searchParams.get('sort');\n  const sortOrder = searchParams.get('order');\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => {\n        setHasError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const preparedPeople = () => {\n    let filteredPeople = [...people];\n\n    if (centuries.length) {\n      filteredPeople = filteredPeople.filter(person => centuries\n        .includes(Math.ceil(+person.born / 100).toString()));\n    }\n\n    if (sex) {\n      filteredPeople = filteredPeople.filter(person => person.sex === sex);\n    }\n\n    if (query) {\n      filteredPeople = filteredPeople.filter(person => (\n        person.name.toLowerCase().includes(query)\n        || person.motherName?.toLowerCase().includes(query)\n        || person.fatherName?.toLowerCase().includes(query)\n      ));\n    }\n\n    if (sortBy) {\n      switch (sortBy) {\n        case SortBy.name:\n        case SortBy.sex:\n          filteredPeople.sort((person1, person2) => {\n            return person1[sortBy].localeCompare(person2[sortBy]);\n          });\n          break;\n\n        case SortBy.born:\n        case SortBy.died:\n          filteredPeople.sort((person1, person2) => {\n            return person1[sortBy] - person2[sortBy];\n          });\n          break;\n\n        default:\n          return filteredPeople;\n      }\n    }\n\n    if (sortOrder) {\n      filteredPeople.reverse();\n    }\n\n    return filteredPeople;\n  };\n\n  const showPeopleFilters = !isLoading && !hasError && !!people.length;\n  const noPeopleOnServer = !people.length && !hasError && !isLoading;\n  const showPeopleTable = !!people.length && !isLoading;\n  const noMatchingPeople = !preparedPeople().length && !isLoading && !hasError;\n\n  return (\n    <>\n      <h1 className=\"title\">\n        People Page\n      </h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {showPeopleFilters && (<PeopleFilters />)}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (<Loader />)}\n\n              {hasError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {noPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {showPeopleTable && (\n                <PeopleTable people={preparedPeople()} />\n              )}\n\n              {noMatchingPeople && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Routes,\n  Route,\n  HashRouter as Router,\n  Navigate,\n} from 'react-router-dom';\n\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n\n        <Route path=\"people\">\n          <Route path=\":slugId?\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}